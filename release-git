#!/usr/bin/env bash
set -euo pipefail

# ==========================================
# release-git
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
#   ./release-git <LAB_NUM> [VERSION] [--draft] [--notes "–¢–µ–∫—Å—Ç"] [--generate-notes] [--latest]
#
# –ü—Ä–∏–º–µ—Ä—ã:
#   ./release-git 1             # lab1-v1.0.0
#   ./release-git 2 2.1.0       # lab2-v2.1.0
#   ./release-git 3 --draft --notes "–ß–µ—Ä–Ω–æ–≤–∏–∫"
# ==========================================

# ---- –ê—Ä–≥—É–º–µ–Ω—Ç—ã ----
if [[ ${1:-} =~ ^[0-9]+$ ]]; then
  LAB_NUM="$1"; shift
else
  echo "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ª–∞–±–æ—Ä–∞—Ç–æ—Ä–Ω–æ–π: ./release-git 2"
  exit 1
fi

VERSION_DEFAULT="${LAB_NUM}.0.0"
if [[ ${1:-} =~ ^[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
  VERSION="$1"; shift
else
  VERSION="$VERSION_DEFAULT"
fi
TAG="lab${LAB_NUM}-v${VERSION}"

# –§–ª–∞–≥–∏
DRAFT_FLAG=""
NOTES="Lab ${LAB_NUM} artifacts"
GENERATE_NOTES=""
LATEST_FLAG=""
while [[ $# -gt 0 ]]; do
  case "$1" in
    --draft) DRAFT_FLAG="--draft"; shift;;
    --notes) NOTES="${2:-$NOTES}"; shift 2;;
    --generate-notes) GENERATE_NOTES="--generate-notes"; shift;;
    --latest) LATEST_FLAG="--latest"; shift;;
    *) echo "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä: $1"; exit 1;;
  esac
done

# ---- –ü—Ä–æ–≤–µ—Ä–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è ----
for bin in git gh zip; do
  command -v "$bin" >/dev/null || { echo "‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: $bin"; exit 1; }
done

REPO_ROOT="$(git rev-parse --show-toplevel)"
cd "$REPO_ROOT"

# owner/repo –∏–∑ origin (ssh –∏–ª–∏ https)
OWNER_REPO="$(git remote get-url origin | sed -E 's#.*github.com[:/ ]([^/]+/[^/.]+)(\.git)?#\1#')"
if [[ -z "$OWNER_REPO" ]]; then
  echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å owner/repo –∏–∑ origin"; exit 1
fi

echo "üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: $OWNER_REPO"
echo "üè∑Ô∏è  –¢–µ–≥: $TAG"

# ---- –ü—É—Ç–∏ ----
PRES_DIR="labs/lab${LAB_NUM}/presentation"
REP_DIR="labs/lab${LAB_NUM}/report"

PRES_QMD="${PRES_DIR}/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--presentation.qmd"
PRES_HTML="${PRES_DIR}/_presentation/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--presentation.html"
PRES_PDF="${PRES_DIR}/_presentation/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--presentation.pdf"

REP_QMD="${REP_DIR}/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--report.qmd"
REP_PDF="${REP_DIR}/_report/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--report.pdf"
REP_DOCX="${REP_DIR}/_report/mathsec--lab${LAB_NUM}--mathsec--lab${LAB_NUM}--report.docx"

ASSETS=()

# ---- –£–ø–∞–∫–æ–≤–∫–∞ image/ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ –∏–º–µ–Ω–∞–º–∏ (–≤ —Ç–µ—Ö –∂–µ –∫–∞—Ç–∞–ª–æ–≥–∞—Ö) ----
if [[ -d "${PRES_DIR}/image" ]]; then
  PRES_ZIP="${PRES_DIR}/presentation-image-${TAG}.zip"
  rm -f "$PRES_ZIP"
  ( cd "${PRES_DIR}" && zip -r "$(basename "$PRES_ZIP")" image >/dev/null )
  ASSETS+=("$PRES_ZIP")
fi
if [[ -d "${REP_DIR}/image" ]]; then
  REP_ZIP="${REP_DIR}/report-image-${TAG}.zip"
  rm -f "$REP_ZIP"
  ( cd "${REP_DIR}" && zip -r "$(basename "$REP_ZIP")" image >/dev/null )
  ASSETS+=("$REP_ZIP")
fi

# ---- –î–æ–±–∞–≤–ª—è–µ–º –∞—Ä—Ç–µ—Ñ–∞–∫—Ç—ã, –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É—é—Ç ----
for f in "$PRES_QMD" "$PRES_HTML" "$PRES_PDF" "$REP_QMD" "$REP_PDF" "$REP_DOCX"; do
  [[ -f "$f" ]] && ASSETS+=("$f")
done

if [[ ${#ASSETS[@]} -eq 0 ]]; then
  echo "‚ùå –ù–µ—Ç –∞—Ä—Ç–µ—Ñ–∞–∫—Ç–æ–≤ –¥–ª—è Lab${LAB_NUM} ‚Äî –ø—Ä–æ–≤–µ—Ä—å –ø—É—Ç–∏"; exit 1
fi

# ---- –ö–æ–Ω—Ç—Ä–æ–ª—å–Ω—ã–µ —Å—É–º–º—ã ----
SUMFILE="SHA256SUMS-lab${LAB_NUM}-${TAG}.txt"
if command -v shasum >/dev/null 2>&1; then
  shasum -a 256 "${ASSETS[@]}" > "$SUMFILE"
  ASSETS+=("$SUMFILE")
elif command -v sha256sum >/dev/null 2>&1; then
  sha256sum "${ASSETS[@]}" > "$SUMFILE"
  ASSETS+=("$SUMFILE")
fi

# ---- –ü—Ä–æ–≤–µ—Ä–∫–∞: —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏–º–µ–Ω–∞ –∞—Å—Å–µ—Ç–æ–≤ (basename) ----
declare -A NAMES=()
for p in "${ASSETS[@]}"; do
  base="$(basename "$p")"
  if [[ -n "${NAMES[$base]:-}" ]]; then
    echo "‚ùå –ö–æ–Ω—Ñ–ª–∏–∫—Ç –∏–º—ë–Ω –∞—Å—Å–µ—Ç–æ–≤: '$base' –≤—Å—Ç—Ä–µ—á–∞–µ—Ç—Å—è –±–æ–ª–µ–µ –æ–¥–Ω–æ–≥–æ —Ä–∞–∑–∞."
    echo "   –ü—É—Ç–∏:"
    printf '   - %s\n' "${NAMES[$base]}" "$p"
    echo "   –ü–µ—Ä–µ–∏–º–µ–Ω—É–π—Ç–µ —Ñ–∞–π–ª—ã, —á—Ç–æ–±—ã –∏–º–µ–Ω–∞ –≤ —Ä–µ–ª–∏–∑–µ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã."
    exit 1
  fi
  NAMES[$base]="$p"
done

# ---- –ü—Ä–µ–≤—å—é –∞—Å—Å–µ—Ç–æ–≤ ----
echo "üìù –ö –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–π–¥—É—Ç –∞—Å—Å–µ—Ç—ã:"
for p in "${ASSETS[@]}"; do
  printf "   ‚Ä¢ %s\n" "$p"
done

# ---- –¢–µ–≥ ----
if git rev-parse -q --verify "refs/tags/${TAG}" >/dev/null; then
  echo "‚ÑπÔ∏è –¢–µ–≥ ${TAG} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ"
else
  git tag -a "$TAG" -m "Release ${TAG}"
fi
git push origin "$TAG" >/dev/null || true

# ---- –†–µ–ª–∏–∑: create –±–µ–∑ –∞—Å—Å–µ—Ç–æ–≤ ----
if gh release view "$TAG" -R "$OWNER_REPO" >/dev/null 2>&1; then
  echo "‚ÑπÔ∏è –†–µ–ª–∏–∑ ${TAG} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
else
  echo "üöÄ –°–æ–∑–¥–∞—é —Ä–µ–ª–∏–∑ ${TAG}..."
  gh release create "$TAG" -R "$OWNER_REPO" \
    --title "Lab${LAB_NUM}" \
    --notes "$NOTES" \
    ${DRAFT_FLAG} ${GENERATE_NOTES} ${LATEST_FLAG}
fi

# ---- –ñ–¥—ë–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å uploadUrl ----
echo "‚è≥ –ñ–¥—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ upload endpoint..."
for i in {1..15}; do
  if gh release view "$TAG" -R "$OWNER_REPO" --json uploadUrl >/dev/null 2>&1; then
    break
  fi
  sleep 1
done

# ---- Upload —Å —Ä–µ—Ç—Ä–∞—è–º–∏ ----
echo "‚¨ÜÔ∏è –ó–∞–≥—Ä—É–∂–∞—é –∞—Å—Å–µ—Ç—ã..."
ATTEMPTS=0
until gh release upload "$TAG" "${ASSETS[@]}" -R "$OWNER_REPO" --clobber; do
  ((ATTEMPTS++))
  if [[ $ATTEMPTS -ge 3 ]]; then
    echo "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∞—Å—Å–µ—Ç—ã –ø–æ—Å–ª–µ $ATTEMPTS –ø–æ–ø—ã—Ç–æ–∫"
    exit 1
  fi
  echo "‚ö†Ô∏è –û—à–∏–±–∫–∞ upload, –ø–æ–≤—Ç–æ—Ä —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã..."
  sleep 3
done

echo "‚úÖ –ì–æ—Ç–æ–≤–æ: —Ä–µ–ª–∏–∑ ${TAG} —Å–æ–∑–¥–∞–Ω/–æ–±–Ω–æ–≤–ª—ë–Ω."